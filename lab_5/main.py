#!/usr/bin/env python3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

START, MENU, CALCULATOR, CONVERTER = range(4)

# –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç —Å –∫–æ–Ω–µ—á–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–æ–º.\n"
        "–í—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
    )
    return await main_menu(update, context)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"), KeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç")],
        [KeyboardButton("‚ùå –í—ã—Ö–æ–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup
    )
    return MENU

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        return await calculator_mode(update, context)
    elif text == "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç":
        return await converter_mode(update, context)
    elif text == "‚ùå –í—ã—Ö–æ–¥":
        return await cancel(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
        return MENU

async def calculator_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("1"), KeyboardButton("2"), KeyboardButton("3"), KeyboardButton("+")],
        [KeyboardButton("4"), KeyboardButton("5"), KeyboardButton("6"), KeyboardButton("-")],
        [KeyboardButton("7"), KeyboardButton("8"), KeyboardButton("9"), KeyboardButton("*")],
        [KeyboardButton("0"), KeyboardButton("="), KeyboardButton("C"), KeyboardButton("/")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    context.user_data['calc_expression'] = ""

    await update.message.reply_text(
        "üßÆ –†–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏\n"
        f"–¢–µ–∫—É—â–µ–µ: {context.user_data['calc_expression']}",
        reply_markup=reply_markup
    )
    return CALCULATOR

async def handle_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    expression = context.user_data.get('calc_expression', "")

    if text == "üîô –ù–∞–∑–∞–¥":
        return await main_menu(update, context)
    elif text == "C":
        context.user_data['calc_expression'] = ""
        expression = ""
    elif text == "=":
        try:
            result = eval(expression)
            await update.message.reply_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expression} = {result}")
            context.user_data['calc_expression'] = str(result)
            expression = str(result)
        except:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏!")
            context.user_data['calc_expression'] = ""
            expression = ""
    elif text in ["/","+", "-", "*", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]:
        context.user_data['calc_expression'] += text
        expression += text
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
        return CALCULATOR

    keyboard = [
        [KeyboardButton("1"), KeyboardButton("2"), KeyboardButton("3"), KeyboardButton("+")],
        [KeyboardButton("4"), KeyboardButton("5"), KeyboardButton("6"), KeyboardButton("-")],
        [KeyboardButton("7"), KeyboardButton("8"), KeyboardButton("9"), KeyboardButton("*")],
        [KeyboardButton("0"), KeyboardButton("="), KeyboardButton("C"), KeyboardButton("/")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}",
        reply_markup=reply_markup
    )
    return CALCULATOR

async def converter_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("USD ‚Üí RUB"), KeyboardButton("EUR ‚Üí RUB")],
        [KeyboardButton("RUB ‚Üí USD"), KeyboardButton("RUB ‚Üí EUR")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üîÑ –†–µ–∂–∏–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
        "üíµ –ö—É—Ä—Å—ã: USD = 82 RUB, EUR = 96 RUB",
        reply_markup=reply_markup
    )
    return CONVERTER

async def handle_converter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥":
        return await main_menu(update, context)

    rates = {'USD': 82, 'EUR': 96}

    if text == "USD ‚Üí RUB":
        context.user_data['conversion'] = 'usd_rub'
        await update.message.reply_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD:")
        return CONVERTER
    elif text == "EUR ‚Üí RUB":
        context.user_data['conversion'] = 'eur_rub'
        await update.message.reply_text("üí∂ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ EUR:")
        return CONVERTER
    elif text == "RUB ‚Üí USD":
        context.user_data['conversion'] = 'rub_usd'
        await update.message.reply_text("‚ÇΩ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB:")
        return CONVERTER
    elif text == "RUB ‚Üí EUR":
        context.user_data['conversion'] = 'rub_eur'
        await update.message.reply_text("‚ÇΩ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB:")
        return CONVERTER
    else:

        try:
            amount = float(text)
            conversion = context.user_data.get('conversion', '')

            if conversion == 'usd_rub':
                result = amount * rates['USD']
                await update.message.reply_text(f"üíµ ${amount} = {result:.2f} ‚ÇΩ")
            elif conversion == 'eur_rub':
                result = amount * rates['EUR']
                await update.message.reply_text(f"üí∂ ‚Ç¨{amount} = {result:.2f} ‚ÇΩ")
            elif conversion == 'rub_usd':
                result = amount / rates['USD']
                await update.message.reply_text(f"‚ÇΩ {amount} = ${result:.2f}")
            elif conversion == 'rub_eur':
                result = amount / rates['EUR']
                await update.message.reply_text(f"‚ÇΩ {amount} = ‚Ç¨{result:.2f}")
            else:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

            return await converter_mode(update, context)

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return CONVERTER

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return ConversationHandler.END

def main():

    BOT_TOKEN = "8191456089:AAFD_4h2BG_EO21P_N1IUcnTV80vMbQLhW4"

    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            START: [MessageHandler(filters.TEXT, start)],
            MENU: [MessageHandler(filters.TEXT, handle_menu)],
            CALCULATOR: [MessageHandler(filters.TEXT, handle_calculator)],
            CONVERTER: [MessageHandler(filters.TEXT, handle_converter)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)

    print("ü§ñ –ë–æ—Ç —Å –∫–æ–Ω–µ—á–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
